#
# cloudbuild.yaml for building and testing vertx-template with Oracle DB and Postgres in GCB
#

# Google Cloud KMS KeyRing and CryptoKey are created for encrypting credentials of SourceClear, Docker Store, Proxy and Maven Repo
# Container Builder service account is granted access to the CryptoKey.
# Run the following command in shell or terminal window to encrpt SourceClear, Docker Store, Proxy and Maven Repo credentials
# MY_SECRET=<enter-your-credential>
# echo -n $MY_SECRET | gcloud kms encrypt --plaintext-file=- --ciphertext-file=- \
# --location=global --keyring=[KEYRING-NAME] --key=[KEY-NAME] | base64

# See below link for more information on using Google Cloud KMS:
# https://cloud.google.com/container-builder/docs/securing-builds/use-encrypted-secrets-credentials#encrypting_an_environment_variable_using_the_cryptokey

secrets:
- kmsKeyName: 'projects/som-rit-infrastructure-dev/locations/global/keyRings/susom-encryption-keyring/cryptoKeys/susom-encryption-key'
  secretEnv:
    SRCCLR_API_TOKEN: CiQAZ2BXpn/Kh1BhBPJTo04sTqH7HvWveMKq7XWanLFLLlBqdlwSxgMA+/0rWrQhkX0mwX+/XXqIGA7ltoW3+8hGID8fCpX3RPHzWzKtepUSyYoB0aDnTox7D3HFx4jZxl5XwpBznP4dxuovhSiwwT+HPRAvoxDMivrPYltPXmDkSE6VTCo2weFw9mQeyi6VIaha/lzDVQIsmZDIMbq8l3fLA6GxcJKjK137DOuNW1pnCg7sEJq7IKR7j4iMyKLDvplJUBb6vIXGMBunj8gNUXLsC0uunol2XmRrDSHlQAGxmz608CUiqygieygLW5/SIV4ApM6XweN74XzmpsZk+DW1HmRxvx/J1q0aVCYML/tanyxI/KpqhOisoEPfJLnRsJaEDORQqLC3Sb9ZTUSj0PVF1CHV6SjggEcB/UyGAqmAE5Hd4wvj2GhE0EjPApaUPHU5KrvTv6xWOOfSTUO5z5jZdebPHxDvP4UMgWyhIFgRwqptdAGC3hVy02fLxarQABFAKBL23+UZZKDloE13qmcNtak9EqfG7HbJbfi8NhOSSl5w/f6U+VPiLjkFHrn8Sjst9L/nhlFn2E6OqoOYiHdJTW4uG9U7QBVHZw1n9xSuB9SiHZYYB2ttXX3TcthyzKddxs0w03AwXS04rwaL
    DOCKER_USERNAME: CiQAZ2BXpv1Ooms6nocrIRlv3ikIAvvQ3Cu1kLR+0c/re88rOTsSMgD7/StaAzqTQq1IeXEQwBifL0au7PVZcnsOwNUKGIDUyb33eeiySHEebmiRL/jQ+Lhd
    DOCKER_PASSWORD: CiQAZ2BXprYOJAqrlJaAO9oGJHhrz6MiuN8J4se4Ne4CADhtkVoSNAD7/StaXPEWv9XQ80ID4QTyTyo5ApD3uOAsUb9bhc0irKIwHJq7eVlo9dc5DmlBgC1DED8=
    PROXY_USERNAME: CiQAZ2BXppRlBpo/KJQP2OArNgQRTPlHKS6TnDZyuG0JjEEVmsgSNAD7/StamUjUnpRLZFIpGdkyiFKw8u6VuopvGMQ2cxTEmktq1bklDP+MPb0hlL8nYR4Kl80=
    PROXY_PASSWORD: CiQAZ2BXpj/uiS68e+Uu88KHLssDMwcLFYnGtrRcKuEeTY40ka8SNAD7/StauUD9pMiYM8YpO6NXMBYz+vmys9aISw39VoMb7vh9xgkx1rGQCb/HS0KEDscHd5o=
    MAVEN_USERNAME: CiQAZ2BXpkX1G4x18UcoJTjKHJPWt6V4DwOz67bxlP4THd079BwSLgD7/StaBlfl7VzpdCKgM/CdmU4Omx6dgkijsIAFZ5NpaMk7Z7Ng1N50r5rDbH0=
    MAVEN_PASSWORD: CiQAZ2BXpoY09g5dcRr1Y0MXn0ABS6VOvYjSBjUc9PFkzgiv9rcSMQD7/StagQLdyMqbQZg1t44sLFHVclMRJ/FahpHYzjHBCWL16NmlinacLvnEIOwpGHo=

# Build Steps:
steps:

#
# Steps for building and testing vertx-template with Oracle DB
#

# Copying customized build files 
- name: 'gcr.io/cloud-builders/docker'
  entrypoint: 'bash'
  args: ['-c', "cp ./oracle_sample.properties ./sample.properties; cp ./pom_proxy.xml ./pom.xml"]

# Authenticating to Docker Store
- name: 'gcr.io/cloud-builders/docker'
  entrypoint: 'bash'
  args: ['-c', 'docker login --username=$$DOCKER_USERNAME --password=$$DOCKER_PASSWORD']
  secretEnv: ['DOCKER_USERNAME', 'DOCKER_PASSWORD']

# Creating a separate network
# It is required for communication between Oracle DB server and APP server
- name: 'gcr.io/cloud-builders/docker'
  entrypoint: 'bash'
  args: ['-c', 'docker network create $$ORACLEDB_NET']
  env: ['ORACLEDB_NET=stanford-oracledb']

# Creating an Oracle DB server 
- name: 'gcr.io/cloud-builders/docker'
  entrypoint: 'bash'
  args: ['-c', "docker run -d --name $$ORACLEDB_SERVER --net $$ORACLEDB_NET \
         -v /workspace:/workspace $$ORACLEDB_IMAGE"]
  env: ['ORACLEDB_IMAGE=store/oracle/database-enterprise:12.2.0.1-slim', 'ORACLEDB_SERVER=oracle-dbserver',
        'ORACLEDB_NET=stanford-oracledb']

# Building application jar using APP build server
# Note: docker volume(m2) mounted as local maven repo(~/.m2) is used in other build steps
#       to save build time
- name: 'gcr.io/cloud-builders/docker'
  volumes:
  - name: 'm2'
    path: '/mvn_local_repo'
  entrypoint: 'bash'
  args: ['-c', "docker run -e PROXY_USERNAME -e PROXY_PASSWORD -e MAVEN_USERNAME -e MAVEN_PASSWORD \
         -e MAVEN_ID -e PROXY_HOST -e MAVEN_HOST -e MAVEN_PORT -e SRCCLR_API_TOKEN \
         --name $$APP_BUILD_SERVER --net $$ORACLEDB_NET \
         -v /workspace:/workspace -v /mvn_local_repo:/root/.m2 --entrypoint 'bash' $$APP_BUILD_IMAGE \
         -c 'apt-get update; apt-get install curl -y; cd /workspace; cp settings.xml ~/.m2/settings.xml; \
         mvn -Poracle -DskipTests -Dcheck1 verify; mvn -Poracle -DskipTests -Dcheck2 clean verify; \
         mvn -Poracle -DskipTests clean package; curl -sSL https://download.sourceclear.com/ci.sh | sh'"]
  env: ['APP_BUILD_SERVER=oracledb-app-build-server', 'ORACLEDB_NET=stanford-oracledb',
        'APP_BUILD_IMAGE=gcr.io/cloud-builders/mvn', 'MAVEN_ID=nexus',
        'PROXY_HOST=35.237.190.202', 'MAVEN_HOST=202.65.140.146', 'MAVEN_PORT=8081']
  secretEnv: ['SRCCLR_API_TOKEN', 'PROXY_USERNAME', 'PROXY_PASSWORD', 'MAVEN_USERNAME', 'MAVEN_PASSWORD']

# Checking the health of Oracle DB server
- name: 'gcr.io/cloud-builders/docker'
  entrypoint: 'bash'
  args: ['-c', './check_oracledb_health.sh']
  env: ['DB_HLTH_CHK_MAX_RETRY=7', 'DB_HLTH_CHK_SLEEP=20', 'ORACLEDB_SERVER=oracle-dbserver']

# Testing application jar using APP test server
- name: 'gcr.io/cloud-builders/docker'
  
  entrypoint: 'bash'
  args: ['-c', "docker run -d --name $$APP_TEST_SERVER --net $$ORACLEDB_NET \
         -v /workspace:/workspace --entrypoint 'bash' $$APP_TEST_IMAGE -c 'cd /workspace; \
         java -Djava.security.egd=file:/dev/./urandom -jar /workspace/target/vertx-*-SNAPSHOT.jar create-database run'"]
  env: ['APP_TEST_SERVER=oracledb-app-test-server', 'ORACLEDB_NET=stanford-oracledb',
        'APP_TEST_IMAGE=gcr.io/cloud-builders/mvn']

# Checking database table created by application jar
- name: 'gcr.io/cloud-builders/docker'
  entrypoint: 'bash'
  args: ['-c', "docker exec -e ORACLEDB_SERVER -e DB_TBL_CHK_MAX_RETRY \
         -e DB_TBL_CHK_SLEEP $$ORACLEDB_SERVER bash -c '/workspace/check_oracledb_table.sh'"]
  env: ['DB_TBL_CHK_MAX_RETRY=10', 'DB_TBL_CHK_SLEEP=10', 'ORACLEDB_SERVER=oracle-dbserver']

# Building GCR image for application jar
- name: 'gcr.io/cloud-builders/docker'
  args: ['build', '-t', 'gcr.io/$PROJECT_ID/vertx-template-oracledb:latest', '-f', 'Dockerfile_oracledb', '.']

#
# Steps for building and testing vertx-template with Postgres
#

# Creating a separate network
# It is required for communication between Postgres server and APP server
- name: 'gcr.io/cloud-builders/docker'
  entrypoint: 'bash'
  args: ['-c', 'docker network create $$POSTGRES_NET']
  env: ['POSTGRES_NET=stanford-postgres']

# Copying customized build files
- name: 'gcr.io/cloud-builders/docker'
  entrypoint: 'bash'
  args: ['-c', "cp ./postgres_sample.properties ./sample.properties"]

# Creating a Postgres server 
- name: 'gcr.io/cloud-builders/docker'
  entrypoint: 'bash'
  args: ['-c', "docker run -d --name $$POSTGRES_SERVER --net $$POSTGRES_NET \
         -e POSTGRES_USER -e POSTGRES_PASSWORD -e POSTGRES_DB \
         -v /workspace:/workspace $$POSTGRES_IMAGE"]
  env: ['POSTGRES_IMAGE=postgres:9.3', 'POSTGRES_USER=test', 'POSTGRES_PASSWORD=test', 'POSTGRES_DB=test',
        'POSTGRES_SERVER=postgres-dbserver', 'POSTGRES_NET=stanford-postgres']

# Building application jar using APP build server
- name: 'gcr.io/cloud-builders/docker'
  volumes:
  - name: 'm2'
    path: '/mvn_local_repo'
  entrypoint: 'bash'
  args: ['-c', "docker run -e ORACLEDB_SERVER -e PROXY_USERNAME -e PROXY_PASSWORD -e MAVEN_USERNAME -e MAVEN_PASSWORD \
         -e MAVEN_ID -e PROXY_HOST -e MAVEN_HOST -e MAVEN_PORT -e SRCCLR_API_TOKEN \
         --name $$APP_BUILD_SERVER --net $$POSTGRES_NET \
         -v /workspace:/workspace -v /mvn_local_repo:/root/.m2 --entrypoint 'bash' $$APP_BUILD_IMAGE \
         -c 'apt-get update; apt-get install curl -y; cd /workspace; mvn -Ppostgres -DskipTests -Dcheck1 verify; \
         mvn -Ppostgres -DskipTests -Dcheck2 clean verify; mvn -DskipTests -Ppostgres clean package; \
         curl -sSL https://download.sourceclear.com/ci.sh | sh'"]
  env: ['APP_BUILD_SERVER=postgres-app-build-server', 'POSTGRES_NET=stanford-postgres',
        'APP_BUILD_IMAGE=gcr.io/cloud-builders/mvn', 'MAVEN_ID=nexus',
        'PROXY_HOST=35.237.190.202', 'MAVEN_HOST=202.65.140.146', 'MAVEN_PORT=8081']
  secretEnv: ['SRCCLR_API_TOKEN', 'PROXY_USERNAME', 'PROXY_PASSWORD', 'MAVEN_USERNAME', 'MAVEN_PASSWORD']

# Checking the health of Postgres server
- name: 'gcr.io/cloud-builders/docker'
  entrypoint: 'bash'
  args: ['-c', "docker exec -e POSTGRES_SERVER -e DB_HLTH_CHK_MAX_RETRY \
         -e DB_HLTH_CHK_SLEEP $$POSTGRES_SERVER /workspace/check_postgres_health.sh"]
  env: ['DB_HLTH_CHK_MAX_RETRY=7', 'DB_HLTH_CHK_SLEEP=20', 'POSTGRES_SERVER=postgres-dbserver']

# Testing application jar using APP test server
- name: 'gcr.io/cloud-builders/docker'
  entrypoint: 'bash'
  args: ['-c', "docker run -d --name $$APP_TEST_SERVER --net $$POSTGRES_NET \
         -v /workspace:/workspace --entrypoint 'bash' $$APP_TEST_IMAGE \
         -c 'cd /workspace; java -jar /workspace/target/vertx-*-SNAPSHOT.jar create-database run'"]
  env: ['APP_TEST_SERVER=postgres-app-test-server', 'POSTGRES_NET=stanford-postgres',
        'APP_TEST_IMAGE=gcr.io/cloud-builders/mvn']

# Checking database table created by application jar
- name: 'gcr.io/cloud-builders/docker'
  entrypoint: 'bash'
  args: ['-c', "docker exec -e POSTGRES_SERVER -e DB_TBL_CHK_MAX_RETRY \
         -e DB_TBL_CHK_SLEEP $$POSTGRES_SERVER bash -c '/workspace/check_postgres_table.sh'"]
  env: ['DB_TBL_CHK_MAX_RETRY=10', 'DB_TBL_CHK_SLEEP=10', 'POSTGRES_SERVER=postgres-dbserver']

# Building GCR image for application jar
- name: 'gcr.io/cloud-builders/docker'
  args: ['build', '-t', 'gcr.io/$PROJECT_ID/vertx-template-postgres:latest', '-f', 'Dockerfile_postgres', '.']

# Build timeout
timeout: 1800s

#
# Uploading GCR images for application jar
#
images:
  - 'gcr.io/$PROJECT_ID/vertx-template-postgres:latest'
  - 'gcr.io/$PROJECT_ID/vertx-template-oracledb:latest'
