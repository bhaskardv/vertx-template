#
# cloudbuild.yaml for building and testing vertx-template with Oracle DB and Postgres in GCB
#

# Google Cloud KMS KeyRing and CryptoKey are created for encrypting credentials of SourceClear, Docker Store, Proxy and Maven Repo
# Container Builder service account is granted access to the CryptoKey.
# Run the following command in shell or terminal window to encrpt SourceClear, Docker Store, Proxy and Maven Repo credentials
# MY_SECRET=<enter-your-credential>
# echo -n $MY_SECRET | gcloud kms encrypt --plaintext-file=- --ciphertext-file=- \
# --location=global --keyring=[KEYRING-NAME] --key=[KEY-NAME] | base64

# See below link for more information on using Google Cloud KMS:
# https://cloud.google.com/container-builder/docs/securing-builds/use-encrypted-secrets-credentials#encrypting_an_environment_variable_using_the_cryptokey
 

# Build Steps:
steps:

#
# Steps for building and testing vertx-template with Oracle DB
#



# Steps for building and testing vertx-template with Postgres
#

# Creating a separate network
# It is required for communication between Postgres server and APP server
- name: 'gcr.io/cloud-builders/docker'
  entrypoint: 'bash'
  args: ['-c', 'docker network create $$POSTGRES_NET']
  env: ['POSTGRES_NET=stanford-postgres']

# Copying customized build files
- name: 'gcr.io/cloud-builders/docker'
  entrypoint: 'bash'
  args: ['-c', "cp ./postgres_sample.properties ./sample.properties"]

# Creating a Postgres server 
- name: 'gcr.io/cloud-builders/docker'
  entrypoint: 'bash'
  args: ['-c', "docker run -d --name $$POSTGRES_SERVER --net $$POSTGRES_NET \
         -e POSTGRES_USER -e POSTGRES_PASSWORD -e POSTGRES_DB \
         -v /workspace:/workspace $$POSTGRES_IMAGE"]
  env: ['POSTGRES_IMAGE=postgres:9.3', 'POSTGRES_USER=test', 'POSTGRES_PASSWORD=test', 'POSTGRES_DB=test',
        'POSTGRES_SERVER=postgres-dbserver', 'POSTGRES_NET=stanford-postgres']

# Building application jar using APP build server
- name: 'gcr.io/cloud-builders/docker'
  entrypoint: 'bash'
  args: ['-c', "docker run -e POSTGRES_SERVER \
         --name $$APP_BUILD_SERVER --net $$POSTGRES_NET \
         -v /workspace:/workspace --entrypoint 'bash' $$APP_BUILD_IMAGE \
         -ce 'cd /workspace; mvn -DskipTests -Ppostgres clean package'"]
  env: ['APP_BUILD_SERVER=postgres-app-build-server', 'POSTGRES_NET=stanford-postgres',
        'APP_BUILD_IMAGE=gcr.io/cloud-builders/mvn', 'POSTGRES_SERVER=postgres-dbserver']

# Building GCR image for application jar
- name: 'gcr.io/cloud-builders/docker'
  args: ['build', '-t', 'gcr.io/$PROJECT_ID/vertx-template-postgres:latest', '-f', 'Dockerfile_postgres', '.']

# Build timeout
timeout: 1800s

#
# Uploading GCR images for application jar
#
images:
  - 'gcr.io/$PROJECT_ID/vertx-template-postgres:latest'
