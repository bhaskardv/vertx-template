#
# cloudbuild.yaml for building and testing vertx-template with Oracle DB and Postgres in GCB
#

# Google Cloud KMS KeyRing and CryptoKey are created for encrypting credentials of SourceClear, Docker Store, Proxy and Maven Repo
# Container Builder service account is granted access to the CryptoKey.
# Run the following command in shell or terminal window to encrpt SourceClear, Docker Store, Proxy and Maven Repo credentials
# MY_SECRET=<enter-your-credential>
# echo -n $MY_SECRET | gcloud kms encrypt --plaintext-file=- --ciphertext-file=- \
# --location=global --keyring=[KEYRING-NAME] --key=[KEY-NAME] | base64

# See below link for more information on using Google Cloud KMS:
# https://cloud.google.com/container-builder/docs/securing-builds/use-encrypted-secrets-credentials#encrypting_an_environment_variable_using_the_cryptokey

secrets:
- kmsKeyName: 'projects/som-rit-infrastructure-dev/locations/global/keyRings/susom-encryption-keyring/cryptoKeys/susom-encryption-key'
  secretEnv:
    # Biarca SRCCLR TRIAL TOKEN
    SRCCLR_API_TOKEN: CiQAZ2BXpoLx2BWrWlsVTC6Uv/VGSTWOHln7lemzk2ikuKxNyG8SyQMA+/0rWlq4wfyAQioWUA3YLmoNNrYCgjgsD7FTfDohbb+n7NLOMLMWtCjU/rNsEx7Y+YeEFZ57sav2CBr/5WuSyw1r3IXlUmTvaNlbNOvEnp6nolQS7ynFrSgBboBRvIjS+MjKpKvO21ekBEVtyRH79dSFMYR4alOolaJuCfuGj8qYe2qkZG519E0fNvUoJhfHAlcFY9RTkzKhmBdJC/AKdw8cEqkmqM6Y7WliYQZpkJW+6trWo0SWmtePIeUHsTbkWPYSmOis/HsaBWftNDXYSsWjEyIdRcDPWPOB1qKcw6heNkIJ1mCj7VudBwJv1wL2reOHdXsmBZHfqH/zic9axvdhICDJdPTzIN7mwQSuz4v6EwDMpzxgxL24UekWKCykqNvNVv4CPrb6Gz/B67Wr+N2Hm1LJTLy1L11xAJM200+kSpe6I6a9/CvETyFSKIHKJgowun01urTzRcvk5B6QmA8IFRmm55eG+v8FgtMYjdoFmi6VI1mbU2yaQcle6aT7HQbu8fIZDXOw8f9bqOvMeVIHy+CPC4ndWDCwV+zvPDVbZdcQVC5feRwHnNCMeC2he5KgijJWHhLB4N71tvYK+82dtOwbMDC+
    #SRCCLR_API_TOKEN: CiQAZ2BXpn/Kh1BhBPJTo04sTqH7HvWveMKq7XWanLFLLlBqdlwSxgMA+/0rWrQhkX0mwX+/XXqIGA7ltoW3+8hGID8fCpX3RPHzWzKtepUSyYoB0aDnTox7D3HFx4jZxl5XwpBznP4dxuovhSiwwT+HPRAvoxDMivrPYltPXmDkSE6VTCo2weFw9mQeyi6VIaha/lzDVQIsmZDIMbq8l3fLA6GxcJKjK137DOuNW1pnCg7sEJq7IKR7j4iMyKLDvplJUBb6vIXGMBunj8gNUXLsC0uunol2XmRrDSHlQAGxmz608CUiqygieygLW5/SIV4ApM6XweN74XzmpsZk+DW1HmRxvx/J1q0aVCYML/tanyxI/KpqhOisoEPfJLnRsJaEDORQqLC3Sb9ZTUSj0PVF1CHV6SjggEcB/UyGAqmAE5Hd4wvj2GhE0EjPApaUPHU5KrvTv6xWOOfSTUO5z5jZdebPHxDvP4UMgWyhIFgRwqptdAGC3hVy02fLxarQABFAKBL23+UZZKDloE13qmcNtak9EqfG7HbJbfi8NhOSSl5w/f6U+VPiLjkFHrn8Sjst9L/nhlFn2E6OqoOYiHdJTW4uG9U7QBVHZw1n9xSuB9SiHZYYB2ttXX3TcthyzKddxs0w03AwXS04rwaL
    #DOCKER_USERNAME: CiQAZ2BXpv1Ooms6nocrIRlv3ikIAvvQ3Cu1kLR+0c/re88rOTsSMgD7/StaAzqTQq1IeXEQwBifL0au7PVZcnsOwNUKGIDUyb33eeiySHEebmiRL/jQ+Lhd
    #DOCKER_PASSWORD: CiQAZ2BXprYOJAqrlJaAO9oGJHhrz6MiuN8J4se4Ne4CADhtkVoSNAD7/StaXPEWv9XQ80ID4QTyTyo5ApD3uOAsUb9bhc0irKIwHJq7eVlo9dc5DmlBgC1DED8=
    PROXY_USERNAME: CiQAZ2BXppRlBpo/KJQP2OArNgQRTPlHKS6TnDZyuG0JjEEVmsgSNAD7/StamUjUnpRLZFIpGdkyiFKw8u6VuopvGMQ2cxTEmktq1bklDP+MPb0hlL8nYR4Kl80=
    PROXY_PASSWORD: CiQAZ2BXpj/uiS68e+Uu88KHLssDMwcLFYnGtrRcKuEeTY40ka8SNAD7/StauUD9pMiYM8YpO6NXMBYz+vmys9aISw39VoMb7vh9xgkx1rGQCb/HS0KEDscHd5o=
    #MAVEN_USERNAME: CiQAZ2BXpkX1G4x18UcoJTjKHJPWt6V4DwOz67bxlP4THd079BwSLgD7/StaBlfl7VzpdCKgM/CdmU4Omx6dgkijsIAFZ5NpaMk7Z7Ng1N50r5rDbH0=
    #MAVEN_PASSWORD: CiQAZ2BXpoY09g5dcRr1Y0MXn0ABS6VOvYjSBjUc9PFkzgiv9rcSMQD7/StagQLdyMqbQZg1t44sLFHVclMRJ/FahpHYzjHBCWL16NmlinacLvnEIOwpGHo=

# Build Steps:
steps:

#
# Steps for building and testing vertx-template with Oracle DB
#

# Steps for building and testing vertx-template with Postgres
#

# Creating a separate network
# It is required for communication between Postgres server and APP server
- name: 'gcr.io/cloud-builders/docker'
  entrypoint: 'bash'
  args: ['-c', 'docker network create $$POSTGRES_NET']
  env: ['POSTGRES_NET=stanford-postgres']


# Building application jar using APP build server
- name: 'gcr.io/cloud-builders/docker'
  entrypoint: 'bash'
  #args: ['-c', "docker run -e ORACLEDB_SERVER -e PROXY_USERNAME -e PROXY_PASSWORD -e MAVEN_USERNAME -e MAVEN_PASSWORD \
  #       -e MAVEN_ID -e PROXY_HOST -e MAVEN_HOST -e MAVEN_PORT -e SRCCLR_API_TOKEN \
  #       --name $$APP_BUILD_SERVER --net $$POSTGRES_NET \
  #       -v /workspace:/workspace -v /mvn_local_repo:/root/.m2 --entrypoint 'bash' $$APP_BUILD_IMAGE \
  #       -c 'apt-get update; apt-get install curl -y; cd /workspace; mvn -Ppostgres -DskipTests -Dcheck1 verify; \
  #       mvn -Ppostgres -DskipTests -Dcheck2 clean verify; mvn -DskipTests -Ppostgres clean package; \
  #       curl -sSL https://download.sourceclear.com/ci.sh | sh'"]
  args: ['-c', "docker run -e POSTGRES_SERVER -e PROXY_USERNAME -e PROXY_PASSWORD \
         -e MAVEN_ID -e PROXY_HOST -e MAVEN_HOST -e SRCCLR_API_TOKEN \
         --name $$APP_BUILD_SERVER --net $$POSTGRES_NET \
         -v /workspace:/workspace --entrypoint 'bash' $$APP_BUILD_IMAGE \
         -c 'apt-get update; apt-get install curl -y; cd /workspace; cp /home/bhaskard/vertx-template/settings.xml  ~/.m2/settings.xml; 
         curl -sSL https://download.sourceclear.com/ci.sh | sh'"]
  env: ['APP_BUILD_SERVER=postgres-app-build-server', 'POSTGRES_NET=stanford-postgres',
        'APP_BUILD_IMAGE=gcr.io/cloud-builders/mvn', 'POSTGRES_SERVER=postgres-dbserver', 'MAVEN_ID=irt-maven',
        'PROXY_HOST=35.237.190.202', 'MAVEN_HOST=irt-maven.stanford.edu']
  #secretEnv: ['SRCCLR_API_TOKEN', 'PROXY_USERNAME', 'PROXY_PASSWORD', 'MAVEN_USERNAME', 'MAVEN_PASSWORD']
  secretEnv: ['SRCCLR_API_TOKEN', 'PROXY_USERNAME', 'PROXY_PASSWORD' ]
